//java
class Solution {
    public List<List<String>> partition(String s) {
        int len = s.length();
        boolean[][] dp = new boolean[len][len];
        List<List<String>> result = new ArrayList<>();
        findAll(result, s, 0, new ArrayList<>(), dp);
        return result;
    }

    void findAll(List<List<String>> result, String s, int start, List<String> currentList, boolean[][] dp) {
        if (start >= s.length()) result.add(new ArrayList<>(currentList));
        for (int end = start; end < s.length(); end++) {
            if (s.charAt(start) == s.charAt(end) && (end - start <= 2 || dp[start + 1][end - 1])) {
                dp[start][end] = true;
                currentList.add(s.substring(start, end + 1));
                findAll(result, s, end + 1, currentList, dp);
                currentList.remove(currentList.size() - 1);
            }
        }
    }
}



//c++
class Solution {
public:
    bool is_palindrome(string s)
    {
        int i=0,j=s.size()-1;
        while(i<j)
        {
            if(s[i]!=s[j])
                return false;
            i++;j--;
        }
        return true;
    }
    void find_all(string s,vector<string>&temp,vector<vector<string>>&result)
    {
        int n=s.size();
        if(n==0)
        {
            result.push_back(temp);
            return;
        }
          for(int i=0;i<n;i++)
        {
            string pre=s.substr(0,i+1);
            if(is_palindrome(pre))
            {
                temp.push_back(pre);
                find_all(s.substr(i+1,n-i),temp,result);
                temp.pop_back();
                
            }
        }
      
        
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>>result;
        int n=s.size();
        vector<string>temp;
        find_all(s,temp,result);
        return result;
    }
};
